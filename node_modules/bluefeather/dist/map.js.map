{"version":3,"sources":["../src/map.js"],"names":["map","values","mapper","configuration","concurrency","Infinity","process","env","BLUEFEATHER_MAX_CONCURRENCY","parseInt"],"mappings":";;;;;;;AAEA;;AAYA,MAAMA,GAAkB,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,aAAjB,KAAmC;AAC5D,MAAIC,WAAJ;AAEAA,EAAAA,WAAW,GAAGD,aAAa,IAAIA,aAAa,CAACC,WAA/B,IAA8CC,QAA5D,CAH4D,CAK5D;;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,2BAAhB,EAA6C;AAC3C;AACAJ,IAAAA,WAAW,GAAGK,QAAQ,CAACH,OAAO,CAACC,GAAR,CAAYC,2BAAb,EAA0C,EAA1C,CAAtB;AACD;;AAED,SAAO,mBAAYP,MAAZ,EAAoBC,MAApB,EAA4B;AACjCE,IAAAA;AADiC,GAA5B,CAAP;AAGD,CAdD;;eAgBeJ,G","sourcesContent":["// @flow\n\nimport {\n  map as bluebirdMap\n} from 'bluebird';\n\ntype MapperType<T, R> = (currentValue: T, index: number, values: $ReadOnlyArray<T>) => R;\n\ntype MapConfigurationType = {|\n  +concurrency: number\n|};\n\ntype MapType<T, R> = (values: $ReadOnlyArray<T>, mapper: MapperType<T, R>, configuration?: MapConfigurationType) => Promise<$ReadOnlyArray<R>>;\n\nconst map: MapType<*, *> = (values, mapper, configuration) => {\n  let concurrency;\n\n  concurrency = configuration && configuration.concurrency || Infinity;\n\n  // eslint-disable-next-line no-process-env\n  if (process.env.BLUEFEATHER_MAX_CONCURRENCY) {\n    // eslint-disable-next-line no-process-env\n    concurrency = parseInt(process.env.BLUEFEATHER_MAX_CONCURRENCY, 10);\n  }\n\n  return bluebirdMap(values, mapper, {\n    concurrency\n  });\n};\n\nexport default map;\n"],"file":"map.js"}