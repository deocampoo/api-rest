{"version":3,"sources":["../src/Tmdb.js"],"names":["log","Logger","child","namespace","Tmdb","constructor","apiKey","language","get","resource","parameters","response","responseType","searchParams","api_key","throwHttpErrors","String","statusCode","startsWith","headers","rateLimitRemaining","Number","currentTime","Math","round","Date","getTime","rateLimitReset","cooldownTime","max","debug","NotFoundError","RemoteError","body","status_message","status_code","camelCase","getMovie","movieId","movie","revenue","runtime","getMovieBackdropImages","includeImageLanguage","include_image_language","join","backdrops","getMovieCastCredits","movieCredits","cast","getMovieCrewCredits","crew","getMoviePosterImages","posters","getMovieVideos","results","getPerson","personId","person","getCompany","companyId","company","findId","resourceType","externalSource","externalId","Unimplemented","result","external_source","movieResults","personResults","Error","length","UnexpectedResponseError","id"],"mappings":";;AAEA;AACA;AACA;;;AAGA;;;AAGA;AACA,kC;;;;;;;;;;;;;;;;;;;;;;AAsBA,MAAMA,GAAG,GAAGC,gBAAOC,KAAP,CAAa;AACvBC,EAAAA,SAAS,EAAE,MADY,EAAb,CAAZ;;;AAIA,MAAMC,IAAN,CAAW;;;;;AAKTC,EAAAA,WAAW,CAAEC,MAAF,eAAkBC,QAAgB,gBAAG,IAArC,EAA2C;AACpD,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAED;AACA,QAAMC,GAAN,CAAWC,QAAX,eAA6BC,UAAqB,mBAAG,EAArD,cAAiE;AAC/D;AACA,WAAO,IAAP,EAAa;AACX,YAAMC,QAAQ,GAAG,MAAM,kBAAI,kCAAkCF,QAAtC,EAAgD;AACrEG,QAAAA,YAAY,EAAE,MADuD;AAErEC,QAAAA,YAAY;AACV;AACAC,UAAAA,OAAO,EAAE,KAAKR,MAFJ;;;AAKNI,QAAAA,UALM,eAFyD;;AASrEK,QAAAA,eAAe,EAAE,KAToD,EAAhD,CAAvB;;;AAYA,UAAI,CAACC,MAAM,CAACL,QAAQ,CAACM,UAAV,CAAN,CAA4BC,UAA5B,CAAuC,GAAvC,CAAL,EAAkD;AAChD,YAAIP,QAAQ,CAACQ,OAAT,CAAiB,uBAAjB,CAAJ,EAA+C;AAC7C,gBAAMC,kBAAkB,GAAGC,MAAM,CAACV,QAAQ,CAACQ,OAAT,CAAiB,uBAAjB,CAAD,CAAjC;;AAEA,cAAI,CAACC,kBAAL,EAAyB;AACvB,kBAAME,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,CAApB;AACA,kBAAMC,cAAc,GAAGN,MAAM,CAACV,QAAQ,CAACQ,OAAT,CAAiB,mBAAjB,CAAD,CAA7B;;AAEA;AACA;AACA,kBAAMS,YAAY,GAAGL,IAAI,CAACM,GAAL,CAASF,cAAc,GAAGL,WAA1B,EAAuC,EAAvC,CAArB;;AAEAtB,YAAAA,GAAG,CAAC8B,KAAJ,CAAU,wCAAV,EAAoDF,YAApD;;AAEA,kBAAM,wBAAMA,YAAY,GAAG,IAArB,CAAN;;AAEA;AACA;AACD;AACF;;AAED,YAAIjB,QAAQ,CAACM,UAAT,KAAwB,GAA5B,EAAiC;AAC/B,gBAAM,IAAIc,qBAAJ,EAAN;AACD;;AAED,cAAM,IAAIC,mBAAJ,CAAgBrB,QAAQ,CAACsB,IAAT,CAAcC,cAA9B,EAA8CvB,QAAQ,CAACsB,IAAT,CAAcE,WAA5D,CAAN;AACD;;AAED,aAAO,0BAAYxB,QAAQ,CAACsB,IAArB,EAA2BG,iBAA3B,CAAP;AACD;AACF;;AAED,QAAMC,QAAN,CAAgBC,OAAhB,uCAAqD;AACnD,UAAMC,KAAK,GAAG,MAAM,KAAK/B,GAAL,CAAS,WAAW8B,OAApB,EAA6B;AAC/C/B,MAAAA,QAAQ,EAAE,KAAKA,QADgC,EAA7B,CAApB;;;AAIA;AACKgC,IAAAA,KADL;;AAGE;AACAC,MAAAA,OAAO,EAAED,KAAK,CAACC,OAAN,IAAiB,IAJ5B;;AAME;AACAC,MAAAA,OAAO,EAAEF,KAAK,CAACE,OAAN,IAAiB,IAP5B;;AASD;;AAED,QAAMC,sBAAN,CAA8BJ,OAA9B,eAA+CK,oBAA/C,oFAA8I;AAC5I,UAAMJ,KAAK,GAAG,MAAM,KAAK/B,GAAL,CAAS,WAAW8B,OAAX,GAAqB,SAA9B,EAAyC;AAC3DM,MAAAA,sBAAsB,EAAED,oBAAoB,GAAGA,oBAAoB,CAACE,IAArB,CAA0B,GAA1B,CAAH,GAAoC,IADrB;AAE3DtC,MAAAA,QAAQ,EAAE,KAAKA,QAF4C,EAAzC,CAApB;;;AAKA,WAAOgC,KAAK,CAACO,SAAb;AACD;;AAED,QAAMC,mBAAN,CAA2BT,OAA3B,iEAA0F;AACxF,UAAMU,YAAY,GAAG,MAAM,KAAKxC,GAAL,CAAS,WAAW8B,OAAX,GAAqB,UAA9B,EAA0C;AACnE/B,MAAAA,QAAQ,EAAE,KAAKA,QADoD,EAA1C,CAA3B;;;AAIA,WAAOyC,YAAY,CAACC,IAApB;AACD;;AAED,QAAMC,mBAAN,CAA2BZ,OAA3B,iEAA0F;AACxF,UAAMU,YAAY,GAAG,MAAM,KAAKxC,GAAL,CAAS,WAAW8B,OAAX,GAAqB,UAA9B,EAA0C;AACnE/B,MAAAA,QAAQ,EAAE,KAAKA,QADoD,EAA1C,CAA3B;;;AAIA,WAAOyC,YAAY,CAACG,IAApB;AACD;;AAED,QAAMC,oBAAN,CAA4Bd,OAA5B,eAA6CK,oBAA7C,kFAA0I;AACxI,UAAMJ,KAAK,GAAG,MAAM,KAAK/B,GAAL,CAAS,WAAW8B,OAAX,GAAqB,SAA9B,EAAyC;AAC3DM,MAAAA,sBAAsB,EAAED,oBAAoB,GAAGA,oBAAoB,CAACE,IAArB,CAA0B,GAA1B,CAAH,GAAoC,IADrB;AAE3DtC,MAAAA,QAAQ,EAAE,KAAKA,QAF4C,EAAzC,CAApB;;;AAKA,WAAOgC,KAAK,CAACc,OAAb;AACD;;AAED,QAAMC,cAAN,CAAsBhB,OAAtB,4DAAgF;AAC9E,UAAMC,KAAK,GAAG,MAAM,KAAK/B,GAAL,CAAS,WAAW8B,OAAX,GAAqB,SAA9B,EAAyC;AAC3D/B,MAAAA,QAAQ,EAAE,KAAKA,QAD4C,EAAzC,CAApB;;;AAIA,WAAOgC,KAAK,CAACgB,OAAb;AACD;;AAED,QAAMC,SAAN,CAAiBC,QAAjB,wCAAwD;AACtD,UAAMC,MAAM,GAAG,MAAM,KAAKlD,GAAL,CAAS,YAAYiD,QAArB,EAA+B;AAClDlD,MAAAA,QAAQ,EAAE,KAAKA,QADmC,EAA/B,CAArB;;;AAIA,WAAOmD,MAAP;AACD;;AAED,QAAMC,UAAN,CAAkBC,SAAlB,yCAA2D;AACzD,UAAMC,OAAO,GAAG,MAAM,KAAKrD,GAAL,CAAS,aAAaoD,SAAtB,EAAiC;AACrDrD,MAAAA,QAAQ,EAAE,KAAKA,QADsC,EAAjC,CAAtB;;;AAIA,WAAOsD,OAAP;AACD;;AAED,QAAMC,MAAN,CAAcC,YAAd,2BAAgDC,cAAhD,eAAwEC,UAAxE,oCAA6G;AAC3G,QAAIF,YAAY,KAAK,OAAjB,IAA4BA,YAAY,KAAK,QAAjD,EAA2D;AACzD,YAAM,IAAIG,qBAAJ,EAAN;AACD;;AAED,QAAIF,cAAc,KAAK,MAAvB,EAA+B;AAC7B,YAAM,IAAIE,qBAAJ,EAAN;AACD;;AAED,UAAMC,MAAM,GAAG,MAAM,KAAK3D,GAAL,CAAS,UAAUyD,UAAnB,EAA+B;AAClDG,MAAAA,eAAe,EAAEJ,cAAc,GAAG,KADgB,EAA/B,CAArB;;;AAIA,QAAIT,OAAJ;;AAEA,QAAIQ,YAAY,KAAK,OAArB,EAA8B;AAC5BR,MAAAA,OAAO,GAAGY,MAAM,CAACE,YAAjB;AACD,KAFD,MAEO,IAAIN,YAAY,KAAK,QAArB,EAA+B;AACpCR,MAAAA,OAAO,GAAGY,MAAM,CAACG,aAAjB;AACD,KAFM,MAEA;AACL,YAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,QAAIhB,OAAO,CAACiB,MAAR,KAAmB,CAAvB,EAA0B;AACxB,YAAM,IAAIzC,qBAAJ,EAAN;AACD;;AAED,QAAIwB,OAAO,CAACiB,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIC,+BAAJ,EAAN;AACD;;AAED,WAAOpD,MAAM,CAACkC,OAAO,CAAC,CAAD,CAAP,CAAWmB,EAAZ,CAAb;AACD,GApKQ,C;;;AAuKItE,I","sourcesContent":["// @flow\n\nimport got from 'got';\nimport deepMapKeys from 'deep-map-keys';\nimport {\n  delay,\n} from 'bluefeather';\nimport {\n  camelCase,\n} from 'lodash';\nimport Logger from './Logger';\nimport {\n  NotFoundError,\n  RemoteError,\n  UnexpectedResponseError,\n  Unimplemented,\n} from './errors';\nimport type {\n  MovieBackdropImageType,\n  MovieCastCreditType,\n  MovieCrewCreditType,\n  MoviePosterImageType,\n  MovieType,\n  MovieVideoType,\n  PersonType,\n  CompanyType,\n} from './types';\n\ntype QueryType = {\n  [key: string]: string | number | null,\n  ...\n};\n\nconst log = Logger.child({\n  namespace: 'Tmdb',\n});\n\nclass Tmdb {\n  apiKey: string;\n\n  language: string;\n\n  constructor (apiKey: string, language: string = 'en') {\n    this.apiKey = apiKey;\n    this.language = language;\n  }\n\n  // eslint-disable-next-line flowtype/no-weak-types\n  async get (resource: string, parameters: QueryType = {}): Object {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const response = await got('https://api.themoviedb.org/3/' + resource, {\n        responseType: 'json',\n        searchParams: {\n          // eslint-disable-next-line id-match\n          api_key: this.apiKey,\n\n          // eslint-disable-next-line no-extra-parens, flowtype/no-weak-types\n          ...(parameters: Object),\n        },\n        throwHttpErrors: false,\n      });\n\n      if (!String(response.statusCode).startsWith('2')) {\n        if (response.headers['x-ratelimit-remaining']) {\n          const rateLimitRemaining = Number(response.headers['x-ratelimit-remaining']);\n\n          if (!rateLimitRemaining) {\n            const currentTime = Math.round(new Date().getTime() / 1000);\n            const rateLimitReset = Number(response.headers['x-ratelimit-reset']);\n\n            // The minimum 30 seconds cooldown ensures that in case 'x-ratelimit-reset'\n            // time is wrong, we don't bombard the TMDb server with requests.\n            const cooldownTime = Math.max(rateLimitReset - currentTime, 30);\n\n            log.debug('reached rate limit; waiting %d seconds', cooldownTime);\n\n            await delay(cooldownTime * 1000);\n\n            // eslint-disable-next-line no-continue\n            continue;\n          }\n        }\n\n        if (response.statusCode === 404) {\n          throw new NotFoundError();\n        }\n\n        throw new RemoteError(response.body.status_message, response.body.status_code);\n      }\n\n      return deepMapKeys(response.body, camelCase);\n    }\n  }\n\n  async getMovie (movieId: number): Promise<MovieType> {\n    const movie = await this.get('movie/' + movieId, {\n      language: this.language,\n    });\n\n    return {\n      ...movie,\n\n      // Revenue can be 0, e.g. https://gist.github.com/gajus/b396a7e1af22977b0d98f4c63a664d44#file-response-json-L94\n      revenue: movie.revenue || null,\n\n      // Runtime can be 0, e.g. https://gist.github.com/gajus/b396a7e1af22977b0d98f4c63a664d44#file-response-json-L95\n      runtime: movie.runtime || null,\n    };\n  }\n\n  async getMovieBackdropImages (movieId: number, includeImageLanguage: $ReadOnlyArray<string>): Promise<$ReadOnlyArray<MovieBackdropImageType>> {\n    const movie = await this.get('movie/' + movieId + '/images', {\n      include_image_language: includeImageLanguage ? includeImageLanguage.join(',') : null,\n      language: this.language,\n    });\n\n    return movie.backdrops;\n  }\n\n  async getMovieCastCredits (movieId: number): Promise<$ReadOnlyArray<MovieCastCreditType>> {\n    const movieCredits = await this.get('movie/' + movieId + '/credits', {\n      language: this.language,\n    });\n\n    return movieCredits.cast;\n  }\n\n  async getMovieCrewCredits (movieId: number): Promise<$ReadOnlyArray<MovieCrewCreditType>> {\n    const movieCredits = await this.get('movie/' + movieId + '/credits', {\n      language: this.language,\n    });\n\n    return movieCredits.crew;\n  }\n\n  async getMoviePosterImages (movieId: number, includeImageLanguage: $ReadOnlyArray<string>): Promise<$ReadOnlyArray<MoviePosterImageType>> {\n    const movie = await this.get('movie/' + movieId + '/images', {\n      include_image_language: includeImageLanguage ? includeImageLanguage.join(',') : null,\n      language: this.language,\n    });\n\n    return movie.posters;\n  }\n\n  async getMovieVideos (movieId: number): Promise<$ReadOnlyArray<MovieVideoType>> {\n    const movie = await this.get('movie/' + movieId + '/videos', {\n      language: this.language,\n    });\n\n    return movie.results;\n  }\n\n  async getPerson (personId: number): Promise<PersonType> {\n    const person = await this.get('person/' + personId, {\n      language: this.language,\n    });\n\n    return person;\n  }\n\n  async getCompany (companyId: number): Promise<CompanyType> {\n    const company = await this.get('company/' + companyId, {\n      language: this.language,\n    });\n\n    return company;\n  }\n\n  async findId (resourceType: 'movie' | 'person', externalSource: 'imdb', externalId: string): Promise<number> {\n    if (resourceType !== 'movie' && resourceType !== 'person') {\n      throw new Unimplemented();\n    }\n\n    if (externalSource !== 'imdb') {\n      throw new Unimplemented();\n    }\n\n    const result = await this.get('find/' + externalId, {\n      external_source: externalSource + '_id',\n    });\n\n    let results;\n\n    if (resourceType === 'movie') {\n      results = result.movieResults;\n    } else if (resourceType === 'person') {\n      results = result.personResults;\n    } else {\n      throw new Error('Unexpected state.');\n    }\n\n    if (results.length === 0) {\n      throw new NotFoundError();\n    }\n\n    if (results.length > 1) {\n      throw new UnexpectedResponseError();\n    }\n\n    return Number(results[0].id);\n  }\n}\n\nexport default Tmdb;\n"],"file":"Tmdb.js"}