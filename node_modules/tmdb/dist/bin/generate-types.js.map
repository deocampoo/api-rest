{"version":3,"sources":["../../src/bin/generate-types.js"],"names":["typeMap","CompanyType","data","paths","get","responses","schema","properties","ImagePathType","definitions","type","MovieBackdropImageType","backdrops","items","MovieCastCreditType","cast","MovieCrewCreditType","crew","MoviePosterImageType","posters","MovieType","MovieVideoType","results","PersonType","definitionMap","typeNames","Object","keys","createFlowType","typeDefinition","Array","isArray","map","join","getPrimitiveFlowType","createFlowObject","Error","resource","propertyNames","sort","types","propertyName","property","push","getPropertyFlowType","typeName","$ref","mappedType","console","log","run","oas","json","resourceResolver"],"mappings":"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","sourcesContent":["// @flow\n\n/**\n * @file A promitive script used to generate Flow type declarations using TMDb OAS output.\n */\n\nimport got from 'got';\nimport {\n  camelCase,\n} from 'lodash';\n\nconst typeMap = {\n  CompanyType: (data) => {\n    return data.paths['/company/{company_id}'].get.responses['200'].schema.properties;\n  },\n  ImagePathType: (data) => {\n    return data.definitions['image-path'].type;\n  },\n  MovieBackdropImageType: (data) => {\n    return data.paths['/movie/{movie_id}/images'].get.responses['200'].schema.properties.backdrops.items.properties;\n  },\n  MovieCastCreditType: (data) => {\n    return data.paths['/movie/{movie_id}/credits'].get.responses['200'].schema.properties.cast.items.properties;\n  },\n  MovieCrewCreditType: (data) => {\n    return data.paths['/movie/{movie_id}/credits'].get.responses['200'].schema.properties.crew.items.properties;\n  },\n  MoviePosterImageType: (data) => {\n    return data.paths['/movie/{movie_id}/images'].get.responses['200'].schema.properties.posters.items.properties;\n  },\n  MovieType: (data) => {\n    return data.paths['/movie/{movie_id}'].get.responses['200'].schema.properties;\n  },\n  MovieVideoType: (data) => {\n    return data.paths['/movie/{movie_id}/videos'].get.responses['200'].schema.properties.results.items.properties;\n  },\n  PersonType: (data) => {\n    return data.paths['/person/{person_id}'].get.responses['200'].schema.properties;\n  },\n};\n\nconst definitionMap = {\n  '#/definitions/image-path': 'ImagePathType',\n};\n\nconst typeNames = Object.keys(typeMap);\n\nconst createFlowType = (typeDefinition) => {\n  if (Array.isArray(typeDefinition)) {\n    return typeDefinition.map(createFlowType).join(' | ');\n  } else if (typeof typeDefinition === 'string') {\n    // eslint-disable-next-line no-use-before-define\n    return getPrimitiveFlowType(typeDefinition);\n  } else if (typeof typeDefinition === 'object' && typeDefinition !== null) {\n    // eslint-disable-next-line no-use-before-define\n    return createFlowObject(typeDefinition);\n  }\n\n  throw new Error('Unexpected type definition.');\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst createFlowObject = (resource: Object) => {\n  const propertyNames = Object.keys(resource);\n\n  propertyNames.sort();\n\n  const types = [];\n\n  for (const propertyName of propertyNames) {\n    const property = resource[propertyName];\n\n    // eslint-disable-next-line no-use-before-define\n    types.push('+' + camelCase(propertyName) + ': ' + getPropertyFlowType(property));\n  }\n\n  return '{|\\n' + types.join(',\\n') + '\\n|}';\n};\n\nconst getPrimitiveFlowType = (typeName: string) => {\n  if (typeName === 'boolean' || typeName === 'string' || typeName === 'null' || typeName === 'number') {\n    return typeName;\n  }\n\n  if (typeName === 'object') {\n    return 'Object';\n  }\n\n  if (typeName === 'integer') {\n    return 'number';\n  }\n\n  throw new Error('Unexpected input type.');\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nconst getPropertyFlowType = (property: Object) => {\n  if (property.$ref) {\n    const mappedType = definitionMap[property.$ref];\n\n    if (!mappedType) {\n      // eslint-disable-next-line no-console\n      console.log('property.$ref', property.$ref);\n\n      throw new Error('Unmapped definition.');\n    }\n\n    return mappedType;\n  }\n\n  if (Array.isArray(property.type)) {\n    return property.type.map(getPrimitiveFlowType).join(' | ');\n  }\n\n  if (property.type === 'array') {\n    return '$ReadOnlyArray<' + getPropertyFlowType(property.items) + '>';\n  }\n\n  if (property.type === 'object' && property.properties) {\n    return createFlowObject(property.properties);\n  }\n\n  return getPrimitiveFlowType(property.type);\n};\n\nconst run = async () => {\n  const oas = await got('https://api.stoplight.io/v1/versions/9WaNJfGpnnQ76opqe/export/oas.json').json();\n\n  for (const typeName of typeNames) {\n    const resourceResolver = typeMap[typeName];\n\n    if (!resourceResolver) {\n      throw new Error('Unexpected state.');\n    }\n\n    const typeDefinition = resourceResolver(oas);\n\n    if (!typeDefinition) {\n      throw new Error('Unexpected state.');\n    }\n\n    // eslint-disable-next-line no-console\n    console.log('export type ' + typeName + ' = ' + createFlowType(typeDefinition) + ';');\n  }\n};\n\nrun();\n"],"file":"generate-types.js"}